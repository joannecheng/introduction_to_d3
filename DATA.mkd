# D3 Workshop

## DATA

We just learned about how D3 lets us manipulate the DOM. The strength of D3
comes from allowing users to *bind data* to these selections. In this example,
we'll create a bar graph from divs using data binding.

Let's start by selecting the body and appending a container div to it.

```javascript
  var selection = d3.select("body").append("div").classed("container", true)
```

Now add an array of numbers to our JS:

```javascript
  var numbers = [30, 10, 23, 49, 37, 20]
```

Now we're going to "bind" this data to the selection and create our bars.

```javascript
  var bars = selection.selectAll("div")
  .data(a)
  .enter()
  .append("div")
  .classed("bar", true)
```

A lot just happened here.

* We took our selection of `<div class="container"></div>` and called `selectAll`
  to select all divs *inside that selection*. Now, when we created our container
  div, and at the time we called `selectAll`, we didn't have anything in it.
  Right now, that `selectAll` is acting as a placeholder so we can bind data to
  it.
* We call a method called `data` and pass in the array. Now we've "bound" the
  data to the selection - if we go into the sorce, we can see that the d3
  selection has a `__data__` attribute that contains the array.
* Now we call a method called `enter()`. When this method is called, it causes
  all the methods chained *after* it to be called for every element on of the
  array we just bound to the selection.
* We can only call certain methods after a `enter` method, most commonly an
  `append` is called. This appends a "div" to `.container` for every element in
  array `numbers`.

So now we have 6 divs with the class of 'bar'. Let's see if we can display data
from the array in the DOM.

```javascript
  bars.text(function(d) { return d; });
```

Now we should be seeing the numbers displayed on the screen. Cool! Let's change
the CSS of these divs so they're right against each other, rather than floating
around. We *could* use the `style` method, but let's just use CSS.

```css
  .bar {
    float: left;
    margin-left: 5px;
  }
```

rather than displaying the numbers, let's make them proper "bars." We can use
the numbers in the array to dictate how tall the bar is going to be by passing
a simple function to the `style` method.

```javascript
  bars.style("height", function(d) { return d + "px"; })
```
