### SVG

So we made a simple bar graph from HTML and CSS. This is pretty cool, but
there's a better way to draw graphics in browsers.

## What is SVG?

SVG is essentially a way to draw graphics using XML markup. It's compatible with
other W3C standards, like CSS and the DOM. This makes it really easy to
incorprate SVG into our websites.

If you know your way around the DOM and have wrangled some HTML, SVG may be
familiar to you. There are a lot of attribute names and values that are specific
to SVG types, so the SVG documentation will be very handy when you start drawing
with SVG (https://developer.mozilla.org/en-US/docs/Web/SVG).

Let's go back to our bar chart example. The code should look like this:

(link to 01_bar_graph_divs.html)

We're going to replace our divs with SVG's `rect` tag. Open up the documentation
https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect

Now we're going to chang our code a little bit. Rather than appending `div`s,
we'll be appending `rects` instead.

```css
  rect.bar {
    fill: steelblue;
  }
```

```javascript
  var numbers = [30, 10, 23, 49, 27, 20, 80]
  var barWidth = 40

  var svg = d3.select("body")
    .append('svg')

  var selection = svg
    .append('g')
    .classed('container', true)

  var bars = selection.selectAll("rect.bar")
    .data(numbers)
    .enter()
    .append("rect")
    .classed("bar", true)
    .attr("height", function(d) { return d; })
    .attr("x", function(d, i) { return i*barWidth; })
    .attr({y: 0, width: barWidth})
```

The code looks almost identical to our previous example, but with some minor
changes!

* We appended an `svg` element to the body. We need to create our SVG markup
in this tag
* We created an element called `g` in that `svg` block. This is a container
tag. It's not needed, but it's good practice to include it so we can organize
and properly separate our SVG markup.
* Rather than select a div, we select a `rect` svg element.
* According to the svg spec, we need to explicity the x, y, height, and width
attributes.
* Notice how we can still style our `rect` elements with css.

## The coordinate system

As you can see, the bar graph is upside down right now. That's because the
larger the Y value, the further down the page it is. We can do this a few
ways. First, let's try to draw our rectangles from the "bottom" of our graph.

In order to have a "bottom" of our graph, we're going to need a max height.
This is going to be the bottom of our graph.

```javascript
var maxHeight = 150;
```

Our y position represents our "starting" position. When we draw a rectangle
with SVG, our rectangle draws out to the right and down. So our starting
position is going to be our max height minus our actual height value.

```javascript
.attr("y", function(d) { return maxHeight - d; })
```

Our height is going to be the same. We want the bar graph to have the same
height as its value.

```javascript
.attr("y", function(d) { return d; })
```

There we go! We can play around with the maxHeight and array values to
get an idea of how the heights are getting generated.

We can also use svg transformations. let's try writing that last example
from scratch, but let's not do that crazy math. Instead, let's add this
bit of code to the end.

```javascript
    .attr("transform", function(d) {
      return "translate(0,"+ (maxHeight - d) +")";
    })
```

We already know that we're changing the "transform" attribute. We're
setting the value to this string that's in the format of "translate(x, y)".
This moves whatever svg element we have to the right and down by however
many pixels we give it.
